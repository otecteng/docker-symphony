require 'rubygems'
require 'spork'
#uncomment the following line to use spork with the debugger
#require 'spork/ext/ruby-debug'

Spork.prefork do
  ENV["RAILS_ENV"] ||= 'test'
  ENV["CLOUD_PROVIDER"] ||= 'mock_cloud'
  require File.expand_path("../../config/environment", __FILE__)
  require File.expand_path("../../lib/cloud/cloud.rb", __FILE__)
  require 'rspec/rails'
  require 'rspec/autorun'
  require 'database_cleaner'
  # Loading more in this block will cause your tests to run faster. However,
  # if you change any configuration or code from libraries loaded here, you'll
  # need to restart spork for it take effect.

  # Requires supporting ruby files with custom matchers and macros, etc,
  # in spec/support/ and its subdirectories.
  Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }
  Dir[Rails.root.join("spec/helpers/**/*.rb")].each { |f| require f }
  Dir[Rails.root.join("lib/utils/**/*.rb")].each { |f| require f }

  RSpec.configure do |config|
    # ## Mock Framework
    #
    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
    #
    # config.mock_with :mocha
    # config.mock_with :flexmock
    # config.mock_with :rr

    # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
    config.fixture_path = "#{::Rails.root}/spec/fixtures"

    # If you're not using ActiveRecord, or you'd prefer not to run each of your
    # examples within a transaction, remove the following line or assign false
    # instead of true.
    config.use_transactional_fixtures = true

    # If true, the base class of anonymous controllers will be inferred
    # automatically. This will be the default behavior in future versions of
    # rspec-rails.
    config.infer_base_class_for_anonymous_controllers = false

    config.include(CustomizedMatchers)

    config.include FactoryGirl::Syntax::Methods
    config.include Devise::TestHelpers, :type => :controller
    config.extend ControllerMacros, :type => :controller
  end
  DatabaseCleaner.strategy = :truncation

end

Spork.each_run do
  # This code will be run each time you run your specs.
end

module ScaleWorks
  module SSH
    def ssh_available? ip
      true
    end
  end
end

def debug(message)
  logger = Logger.new(STDOUT)
  logger.debug ">>>>>>>>>>>>>>>DEBUG START<<<<<<<<<<<<<<<"
  logger.debug message
  logger.debug ">>>>>>>>>>>>>>>DEBUG ENG<<<<<<<<<<<<<<<"
end

def spec_wrapper(steps, &block)
  steps[:before].call
  block.call
ensure
  steps[:after].call
end

